// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth": {
            "post": {
                "description": "Получение JWT токена по логину и паролю.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация пользователя",
                "parameters": [
                    {
                        "description": "Учетные данные",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            }
        },
        "/api/auth/{token}": {
            "delete": {
                "description": "Завершение авторизованной сессии (помечает токен как недействительный).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Завершение сессии",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации в формате Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            }
        },
        "/api/docs": {
            "get": {
                "description": "Получение списка документов текущего пользователя или указанного пользователя (если публичные). Поддерживает фильтрацию и пагинацию.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Получение списка документов",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации в формате Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Логин пользователя, чьи документы запрашиваются",
                        "name": "login",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Ключ для фильтрации (например, 'name')",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Значение для фильтрации",
                        "name": "value",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Лимит количества документов (по умолчанию 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Загрузка нового документа (файла или JSON) с метаданными.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Загрузка нового документа",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации в формате Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Метаданные документа в формате JSON",
                        "name": "meta",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Данные документа в формате JSON (если не файл)",
                        "name": "json",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Файл документа (если file=true в meta)",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            }
        },
        "/api/docs/{id}": {
            "get": {
                "description": "Получение конкретного документа по ID. Если это файл, он отдается напрямую. Если JSON - возвращается в обертке data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Получение одного документа",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации в формате Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID документа",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаление документа по ID. Доступно только владельцу.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Удаление документа",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации в формате Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID документа",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Создание нового пользователя. Требуется токен администратора.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "middleware.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "middleware.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/middleware.ErrorResponse"
                },
                "response": {}
            }
        },
        "model.AuthRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "description": "User login\nrequired: true",
                    "type": "string"
                },
                "pswd": {
                    "description": "User password\nrequired: true",
                    "type": "string"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "description": "User login (min 8 chars, latin letters and digits)\nrequired: true\nminLength: 8\npattern: ^[a-zA-Z0-9]+$",
                    "type": "string"
                },
                "pswd": {
                    "description": "User password (min 8 chars, 2 letters different case, 1 digit, 1 special char)\nrequired: true\nminLength: 8",
                    "type": "string"
                },
                "token": {
                    "description": "Admin token required for registration\nrequired: true",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Document Server API",
	Description:      "Веб-сервер для сохранения и раздачи электронных документов с кэшированием.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
